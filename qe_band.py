import numpy as np
import matplotlib as mpl
mpl.use('Agg')
import matplotlib.pyplot as plt

ymin=-5
ymax=4
title='Band structure of MoS${_2}$'
xticks=[0,83,125,199]
xticklabels=['Γ', 'K', 'M', 'Γ']
lw=1.2 
fontsize=12
dostext = [line for line in open('dos.dat') if line.strip()]
efermi = float(dostext[0].split()[-2])
bdtext = [line for line in open('bd.dat') if line.strip()]
import re
nbnd, nks = [int(xx) for xx in re.sub('[^0-9]',' ',bdtext[0]).split()]
dos = np.loadtxt('dos.dat')

elem=['Mo','S']
ielem=np.array([1,2],dtype=np.int32) # number of atoms for each element
orb=[['s','p','s','d'],['s', 'p']]  # projectors for each element
# oo, orbital index for each kind of color, oo can be generated by the following commands
#grep '[a-zA-Z]' sno.projwfc_up |grep 'Li  2S'|awk '{printf( $1-1",")}'    for 2S of Li
#grep '[a-zA-Z]' sno.projwfc_up |grep 'C   2S'|awk '{printf( $1-1",")}'    for 2S of C
oo=[[5,6,7,8,9],
[11,12,13,15,16,17]]
odos=[[3],
[5,7]]
color=['r', 'cyan']
label=['Mo 4d', 'S 3p']

## read band data from bd.dat
def get_banddata(filename='bd.dat'):
    with open(str(filename)) as f:
        l=f.readline()
        e_kn=np.zeros((nks,nbnd),dtype=float)
        for i in range(nks):
            l=f.readline()
            count=0
            if nbnd%10==0:
                n=nbnd//10
            else:
                n=nbnd//10+1
            for j in range(n):
                l=f.readline()
                for k in range(len(l.split())):
                    e_kn[i][count]=l.split()[k]
                    count+=1
    e_nk = e_kn.T - efermi
    return e_nk

def plot_dos():
    if len(dos[0,:]) == 3:
        plt.figure(figsize=(5,4))
        plt.xlim([-5,5]) 
        plt.ylim(ymin=0,ymax=10)
        plt.xlabel('Energy (eV) ',fontsize=fontsize)
        plt.ylabel('DOS (States/eV) ',fontsize=fontsize)
        plt.title(title, fontsize=fontsize)  
        line1=plt.plot( dos[:,0]-efermi, dos[:,1] ,color='r',linewidth=lw ) 
        plt.axvline(x=0,lw=lw,ls='--')
        plt.fill_between(dos[:,0]-efermi,0,dos[:,1],where=dos[:,1]>=0,facecolor='silver',interpolate=True)
        plt.tight_layout()
        plt.savefig('DOS.svg' )
        plt.close()
        
    elif len(dos[0,:]) == 4:
        plt.figure(figsize=(5,4))
        plt.xlim([-5,5]) 
        plt.ylim(ymin=0)
        plt.xlabel('Energy (eV) ',fontsize=fontsize)
        plt.ylabel('DOS (States/eV) ',fontsize=fontsize)
        plt.title(title, fontsize=fontsize)  
        line1=plt.plot( dos[:,0]-efermi, dos[:,1] ,color='r',linewidth=lw, label='spin up' ) 
        line2=plt.plot( dos[:,0]-efermi,-dos[:,2] ,color='k',linewidth=lw,ls='--',label='spin down') 
        plt.fill_between(dos[:,0]-efermi,0,dos[:,1],where=dos[:,1]>=0,facecolor='silver',interpolate=True)
        plt.fill_between(dos[:,0]-efermi,0,-dos[:,2],where=-dos[:,1]<=0,facecolor='silver',interpolate=True)
        plt.axhline(y=0,lw=lw,ls='--')
        plt.axvline(x=0,lw=lw,ls='--')
        plt.legend()
        plt.tight_layout()
        plt.savefig('DOS.svg' )
        plt.close()

def plot_band():
    e_nk = get_banddata()
    plt.figure(figsize=(4,4))
    plt.xlim([0,nks-1]) 
    plt.ylim([ymin,ymax])
    plt.ylabel(r'$\varepsilon_n(k) - \varepsilon_{\mathrm{F}}$ (eV) ',fontsize=fontsize)

    plt.title(title, fontsize=fontsize)  
    for e_n in e_nk:
        line1=plt.plot( e_n,color='r',linewidth=lw ) 

    plt.axhline(y=0 ,lw=lw,color='0.5',ls='--')
    for i in xticks[1:-1]:
        plt.axvline(x=i, lw=lw,color='0.5',ls='--')

    plt.xticks(xticks,xticklabels, fontsize=fontsize )
    plt.tight_layout()
    plt.savefig('band.svg')
    plt.close()

def plot_banddos():
    e_nk = get_banddata()
    plt.figure(figsize=(5,4))
    grid = plt.GridSpec(1, 3)

    p1=plt.subplot(grid[0,0:2])
    plt.title(title, fontsize=fontsize)  
    for e_n in e_nk:
        plt.plot(e_n,c='r',lw=lw)

    plt.axhline(y=0 ,lw=lw,c='0.5',ls='--')
    for i in xticks[1:-1]:
        plt.axvline(x=i,lw=lw,c='0.5',ls='--')

    plt.xlim([0,nks-1]) 
    plt.ylim([ymin,ymax])
    plt.ylabel('$E-E{_F}$ (eV) ',fontsize=fontsize)
    plt.xticks( xticks,xticklabels, fontsize=fontsize )

    p2=plt.subplot(grid[0,2])
    line1=plt.plot( dos[:,1],dos[:,0]-efermi,c='r',lw=lw) 
    plt.axhline(y=0 ,lw=lw,c='0.5',ls='--')
    plt.axvline(x=0 ,lw=lw,c='0.5',ls='--')
    #plt.fill_between(dos[:,1],dos[:,0]-efermi,0,where=dos[:,1]>=0,facecolor='silver',interpolate=True)
    plt.ylim([ymin,ymax])
    plt.xlim(xmin=0,xmax=15)
    plt.xlabel('DOS (a.u.)',fontsize=fontsize)
    plt.xticks([])
    plt.ylabel('')
    plt.yticks([])
    plt.tight_layout()
    plt.savefig('banddos.svg' )
    plt.close()

def pband_data(infile='sno.projwfc_up'):
    e_nk = get_banddata()
    N=len(elem)
    iorb=np.zeros([N,],dtype=np.int32)  # number of projectors for each element
    for i in range(N):
        iorb[i]=len(orb[i])
    D=[]

    #scf ATOMIC_POSITIONS should be sorted in the same order as above
    count=0
    count_at=0
    for n in range(N):
        for i in range(ielem[n]):
            for j in range(iorb[n]):
                print(n,i,j,count_at+1,elem[n],j+1,orb[n][j])
                fname='sno.pdos_atm#{}({})_wfc#{}({})'.format(count_at+1,elem[n],j+1,orb[n][j])
                D.append(np.loadtxt(fname,dtype=np.float32))
                count+=1
            count_at+=1
    
    import os
    assert os.path.isfile(infile), '%s cannot be found!' % infile
    # read the weights information of band from sno.projwfc_up
    proj_contents = [line for line in open(infile) if line.strip()]
    for ii, line in enumerate(proj_contents):
        if 'F    F' in line:
            norbital, nk, nb = [int(xx) for xx in proj_contents[ii-1].split()]
            line_F = ii
    w_ikn = np.zeros([norbital,nks,nbnd], dtype=float)
    for i in range(norbital):
        for j in range(nks):
            for k in range(nbnd):
                w_ikn[i,j,k] = float(proj_contents[line_F + 2 + (nks * nbnd + 1 ) * i + nbnd * j + k].split()[-1])
    return e_nk, D, w_ikn
    
def plot_pdos(D):
    plt.figure(figsize=(4,4))
    for i in range(len(odos)):
        pdos = np.zeros([len(D[0][:,0]),])
        for j in odos[i]:
            pdos += D[j][:,1]
        plt.plot(D[0][:,0]-efermi,pdos,color=color[i],lw=lw,label=label[i])
    
    plt.xlim([-15,15])
    plt.ylim(ymin=0,ymax=5)
    plt.ylabel(r'DOS (a.u.)',fontsize=fontsize)
    plt.xlabel(r'E (eV) ',fontsize=fontsize)
    plt.legend()
    plt.savefig('pdos.svg' )

def plot_pband(e_nk,w_ikn):
    plt.figure(figsize=(5,4))
    for e_n in e_nk:
        line1=plt.plot( e_n,c='0.5',linewidth=lw ) 

    plt.axhline(y=0 ,lw=lw,color='0.5',ls='--')
    for i in xticks[1:-1]:
        plt.axvline(x=i, lw=lw,color='0.5',ls='--')

    scale=90.0
    for i in range(len(oo)):
        plt.scatter(-1, -1, 20, c=color[i], alpha=0.5, label=label[i],marker='.',edgecolor='none')
        weights = w_ikn[oo[i],:,:].sum(axis=0).T
        plt.scatter(np.tile(range(nks),nbnd), e_nk.reshape(-1),s=scale*weights.reshape(-1),\
                    c=color[i],alpha=0.5,marker='.',edgecolor='none')

    plt.xlim([0,nks-1]) 
    plt.ylabel(r'$\varepsilon_n(k) - \varepsilon_{\mathrm{F}}$ (eV) ',fontsize=12)
    plt.xticks(xticks,xticklabels, fontsize=12 )
    plt.title(title, fontsize=12)

    plt.subplots_adjust(left=0.20, right=0.75, top=0.95, bottom=0.1)
    plt.legend(scatterpoints =1, numpoints=1,markerscale=2.0, bbox_to_anchor=(1.05, 1), loc='upper left', borderaxespad=0.)

    plt.ylim([-16,20])
    plt.tight_layout()
    plt.savefig('pband_whole.svg' )
    plt.ylim([ymin,ymax])
    plt.tight_layout()
    plt.savefig('pband.svg' )
    plt.close()

def plot_pbanddos(D,e_nk,w_ikn):
    plt.figure(figsize=(5,4))
    grid = plt.GridSpec(1, 3)

    p1=plt.subplot(grid[0,0:2])
    for e_n in e_nk:
        line1=plt.plot( e_n,c='0.5',linewidth=lw ) 

    plt.axhline(y=0 ,lw=lw,color='0.5',ls='--')
    for i in xticks[1:-1]:
        plt.axvline(x=i, lw=lw,color='0.5',ls='--')

    scale=90.0
    for i in range(len(oo)):
        weights = w_ikn[oo[i],:,:].sum(axis=0).T
        plt.scatter(np.tile(range(nks),nbnd), e_nk.reshape(-1),s=scale*weights.reshape(-1),\
                    c=color[i],alpha=0.5,marker='.',edgecolor='none')

    plt.xlim([0,nks-1]) 
    plt.ylabel(r'$\varepsilon_n(k) - \varepsilon_{\mathrm{F}}$ (eV) ',fontsize=12)
    plt.xticks(xticks,xticklabels, fontsize=12 )
    plt.title(title, fontsize=12)

    plt.subplots_adjust(left=0.20, right=0.75, top=0.95, bottom=0.1)

    plt.ylim([ymin,ymax])
    p2=plt.subplot(grid[0,2])
    for i in range(len(odos)):
        pdos = np.zeros([len(D[0][:,0]),])
        for j in odos[i]:
            pdos += D[j][:,1]
        line1 = plt.plot(pdos,D[0][:,0]-efermi,color=color[i],lw=lw,label=label[i])
    plt.xlim(xmin=0)
    plt.ylim([ymin,ymax])
    plt.xlabel('DOS (a.u.)',fontsize=fontsize)
    plt.xticks([])
    plt.ylabel('')
    plt.yticks([])
    plt.legend()
    plt.tight_layout()
    plt.savefig('pbanddos.svg' )

def main():
#    plot_band()
#    plot_dos()
#    plot_banddos()
    e_nk, D, w_ikn = pband_data()
    plot_pband(e_nk,w_ikn)
    plot_pdos(D)
    plot_pbanddos(D,e_nk,w_ikn)

if __name__=='__main__':
    main()
